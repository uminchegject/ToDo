[UE体験]
鳥羽さんはなるべく自力で調査しながら実装（Unity経験者）。
タワーディフェンスを実装、敵と接触した際の処理に苦戦しつつ、敵に接触した際にプレイヤーの爆発、ゲームオーバーを行うまでの基本的なゲーム部分を実装した
馬場さんは中村先生と1対1の形式で実装（開発未経験）。
難しいエネミー部分の実装を外して、プレイヤー挙動の実装に集中し、障害物を乗り越えつつクリアするゲームを実装。


[Study]
・二進数と十進数
https://qiita.com/higashi_nc/items/9a5ea00415a008f06843
・VSアセンブラでメモリを追う
https://qiita.com/kaito_tateyama/items/89272098f4b286b64115


[Galaxy]
※引力と遠心力をベースに設計

○球体の周りを球体が回るようにするまで実装
・部屋の中に収まるサイズで配置する
○重力をインプットで調整できるように実装
○カメラの挙動を実装

○レベルの整理
・△複数の星を配置する
○Planetsから近いPlanetを取得する関数を実装する
Game::FindPlanets(Vector3 findPos, float findRange ,std::vector<class SphereActor*>& planets)を実装する


[City]
○3DBlockの実装

○VolumeMakerの実装

○VolumeからBlockまでの処理を実装

○AssetBlockDTの設定
・WindowPatternを複数作成


■3DBlock
○ENUMで種類を管理する
int paramNum = point(1, "BlockTypeParamNum", 0);
int paramIndex = int(paramNum * random(point(2, "P", 0));
string selectedType = point(1, "3DBlockType", paramIndex);
string paramType = s@3DBlockType;
if(selectedType != paramType) { removepoint(0, @ptnum);}

○3DBlock,2DBlockソースの修正及び検証
・Volume単位で3DBlock,2DBlockを管理する


■MakeVolume
※Patternを意識して考える

●パラメーター
・DivideAxis
・DivideBlockSizeRange
・RotateRange
・ScaleRange
・DivideRatio

○Scalingの原点を設定する
・分割面をベースにする
・前の分割面を記憶する


■VolumeToBlock
●Volumeパラメーター 
・BlockType
 -3DBlock
 -2DBlock(Side)
 -2DBlock(Top)
  -Volume単位で管理する
 
○外部と接しているかを判定する処理を実装する

○BlockTypeを複数選択しランダムに決定する処理を実装
 -比率も設定する
 -Noneも加える


■IDEA
●NightCity
・Volumeの形態を規則的にする(規則的にオフセットする)
・BaseSurfaceの種類を多様にする
・OutSidePanelを3DBlockで実装する

●SoulCity
・ランダム要素を強調する
 -角度をランダムにする(ランダムに回転させる)
 -サイズをランダムにする(ランダムな値でオフセットする)

●OldCity
・戸建てメイン
 -Top(屋根)
 -Side(Window)
