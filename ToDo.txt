[反省]
※必ずリビルドを行う
※使う関数の定義を確認する

○uBlockOriginを導入

[Public]
○バインドしたイベントの一連の流れを確認する
※このあたりで分からなかったら報告
・FOnlineAsyncTaskGetPlayerSessionInvitationsの定義を確認
・FOnlineAsyncTaskManagerの一連の処理を確認
・AddToOutQueueされている箇所を確認
・Queのタスクが処理されている箇所を確認

○差分を確認

[Private]
※SingleAssetのみ実装

○pointにAttributeを設定するように修正

○Attributeを適応
・回転
・移動
・スケールの設定
 -アセットスケールを1以下のランダムにして変化をつける
float scaleCofficient = 0.7
v@scale = (1 - scaleCofficient) + scaleCofficient * random(@P);
・アセットの生成
 -※アセットのサイズコントラストが生まれるように選択する
 
・ソース
float sizeX = prim(2, "restlength", 0);
float sizeY = prim(2, "restlength", 1);
float minSize = 10;
float noiseCofficient = 0.02;

vector originPos = prim(1, "P", 0);
@P -= originPos;

float rotateValue = (random(originPos) - 0.5) * 0.2;//(noise(originPos * noiseCofficient) - 0.5) * 1.5;
vector axis = set(0,1,0); //Y軸の回転軸を変数に保存
vector4 q = quaternion(rotateValue ,axis);
matrix mRotate = qconvert(q); //クォタニオンを回転行列に変換

float transValue = (random(originPos) - 0.4) * 0.2;
if(minSize < sizeX && minSize < sizeY) transValue = (random(originPos) - 0.1) * 5;
matrix mTrans = ident();// 単位行列を生成
vector dir = prim(1, "N", 0);
dir *= transValue;

translate(mTrans,dir); //開き角度から移動行列を生成

@P *= mRotate; //回転行列を乗算
@P *= mTrans; // 移動行列を乗算
@P += originPos;
