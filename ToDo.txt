[Employ]
・UE5を触ったことはないですが、自主製作で多少触ったことがあります。
・カリキュラムを見直す。
・インゲーム
 -ゲームプレイに直接関連する処理
・アカデミー・KONAMI・SKY案件の内容を洗い出す
・否定しても対応方法を付け加える
・案件のプロジェクトについてまず理解して、答えを考える。
・積極的な質問・回答をする。
・コミュニケーションの取り方について追加質問する
・プラスアルファでアピールをする。
・3D周り
 -Houdiniを絡めて話す。
・アピールしつつ回答はシンプルに。
質問の意図を汲み取る。

■KONAMI
●学んだこと
・ベースクラスを使って実装していく上でUMG周りの設計の基礎的な部分を理解できた
 -ボタンなど汎用的なWidgetはBP側でも汎用的な処理を実装しており、デザイナーはそれらのWidgetを用いて追加のWidgetを作成し、エンジニアはベースクラスの処理を利用して実装すること
・UMGにおけるCPPとBPの使い分け
 -ボタン周りのイベントなど、デザイナーが制作したデータに関連するものはBPをメインに実装していた
 -データ周りになどサーバー側に関連する処理はcpp側で実装していた。

●後悔したこと
・ベースクラスで8割方実装が完了していたので新規実装を行うことができなかった。
 -ベースクラスを用いた実装を通してUMG周りの設計の基礎的な部分を理解できた。

●次に活かせること
・UMG周りの実装の際に案件で学んだクラス構造などの知識を用いて実装できそう。
　
●新しく用いたツール
・Perforce

■SKY
●学んだこと
・マージ対応
 -
・修正対応
マージ漏れに対する不具合処理の対応を行っていた。
 -手作業で処理をマージする際にマージ元の挙動を確認する必要があり、処理の意図を調査する

・プラットフォームによって、仕様や実装が異なってくる
 -キーボードとコントローラーなど操作に関する違い



[City]
○サイズの適正化

○SoulCityの検証(Block)
・AddObj(横軸)
・SignBoard + Roof + NormalWindow
 -アセットの配置をランダムにする
 -マテリアルをランダムにする

○SoulCityの検証(Volume)
※VolumeMakerを検証しやすくする
※BigVolumeとSmallVolumeを分かりやすく分ける
 -最初のXYZ分割をサイズのみランダム化し、その後Greeble or Patternを行う
・DivideRatioとMinDivideLengthを用いて3DでGreeble分割を行う

○マテリアル周りの修正
・マテリアルパラメーターにスケールを追加する
　-Boxサイズに応じたUV展開をする
・回転軸に応じたUV展開をする

○NightCityのためのVolumeMakerの追加実装
・VolumeScaleパラメーターを追加する
 -当分割を行いVolumeScaleを小さくしてVolumeを生成する
 -BaseVolumeも残す
・OutsideとInside
　-OutSidePanelをAddObjで表現する
 -InsideVolumeにWindowを配置する

■EachCity
※シンプルかつ、テーマに軸があるようにレイアウトする

●OldCity
・アセットの細かい配置を強調

・Block
アセットのサイズに合うように調整する
 -Top(屋根)
 -Side(Window)

●SoulCity
・Blockのランダム性を強調
 -アセットの配置にランダム性をもたせる
 -ブロックのサイズ、向きにランダム性を持たせる
 -マテリアルにランダム性を持たせる
 
・VolumeMaker
 -BaseVolumeをランダムに回転させる処理を追加実装

●NightCity
・Blockごとにメリハリをもたせる
 -Volumeの形態に多様性をもたせる
 -Volumeの形態を規則的にする(規則的にオフセットする)

・VolumeMaker
VolumePatternを強調
 -BaseVolumeのサイズに応じて二種類のParameterで生成する
  -DivideMinSizeで平面サイズが大きい場合はXY分割を行う
 -均等にDivideする
 -InsideかOutside(Window)か
 
・Block
 -WindowとVolumeのみで構成する




[Study]
○OpenGLの環境構築
https://github.com/tokoik/glfw3sample/blob/master/main.cpp
https://codelabo.com/posts/20200228124232

○OpenALとOpenGLを用いた実装をする
フラクタル幾何学を用いた音声、描画表現
・特定座標で音を鳴らすコードを実装
・特定座標に矩形を描画するコードを実装

○勉強の簡単な概要をまとめる
・OpenALを通した勉強
