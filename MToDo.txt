[Study]
○CQEMのそれぞれの意味を確認する

[IZON.]
○挙動確認及びマージ対応


[USD]
○一度サンプルで挙動確認を行って挙動の流れを確認する

・USDの基礎
https://www.youtube.com/watch?v=4kMBwpdwkkw
https://www.slideshare.net/slideshow/usd-79288174/79288174#2
https://fereria.github.io/reincarnation_tech/usd/what_is_usd

・USDの運用
https://fereria.github.io/reincarnation_tech/usd/python/tutorials/01
https://qiita.com/ousttrue/items/b5f34e0f2441ca74467e
https://qiita.com/takahito-tejima/items/ee0332bfb5c9baed3b09

・LOPS&Soraris
https://note.com/indyzonecorp/n/ndf9d8f82d7e5#93191dbb-a31d-4dbc-851a-584b7882528b
https://houdinifx.jp/blog/lops%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF/

https://www.sidefx.com/tutorials/usd-authoring-with-solaris/
https://www.youtube.com/watch?v=SqTHglDeKtU


[Python]
■ツール課題
※サンプルプロジェクトを探す

○仕様
・追加する、減らすという仕様にする
・選択していなかったらダイアログを表示

○レイアウト
・似ているボタン(Append, Remove)は並列に置く
・実行ボタンは段落を変えて配置する
・収縮に対応させる

with LayoutManager(cmds.columnLayout(adj=True, rowSpacing=10)):
	cmds.textField(w=500, tx="TestTextField")
	with LayoutManager(cmds.rowLayout(adj=True)):
		cmds.button(label="追加")
		cmds.button(label="排除")
	cmds.button(label="実行")


○Jsonを用いた保存
・ツール実行時にjsonファイルからリストを取得して、シーン上にあるオブジェクトと照らし合わせて存在すれば登録するように実装
・登録する際にシーン上に存在するかどうかを確認する


・GUI資料
https://3d.crdg.jp/tech/archives/218
https://3d.crdg.jp/tech/archives/382
https://3d.crdg.jp/tech/archives/4495
https://3d.crdg.jp/tech/archives/380
https://3d.crdg.jp/tech/archives/1938

https://patrickvfx.blogspot.com/2017/07/maya-ui-layout-example.html
https://gucheng0712.github.io/python/2019/06/01/Creating-UI-in-Maya.html
https://qiita.com/lie_871221/items/1b6ef8faba06e5180cf9



■HardSurfaceModeling
○モデリングTutorialを調べる
・ハードサーフェスモデリングについて検証する
・プロシージャルにサポートできる行程がないかを調べる


●設計
※Modelingをベースに行い、プロシージャルにサポートするツールを設計する
※模様を生成することを意識する
※HoudiniForMayaも検証する


[Modelieng]
※明確なアセットセットを目標に都度新規実装を加えていく

■ModularOldCity
○BoxとColorでGreebleベースの区画生成と、LineMakerを用いた形態の変化を検証する
・BoxBaseParameterを整理する
 -1通りの挙動を確認する
 -Box&Colorの検証環境を整える
・LineBaseParamenterを新規実装する
 -BoxToLine, LineToBoxを実装
 -DivideHeightを実装
 -Lineの検証環境を整理
 -MakeEdgeを実装
 -DividePrimを実装
・InitParameterを整理する

○MakeEdge(凹)を上部にいくほど追加するように実装
 -MakeEdge後にDividePrimする

△Detail部分を整理する


■LineMakerの設計
・Attributeに表裏のベクトルを設定しておく

●BoxToLine
PolyLineを生成する
・Parameter
 -DividePrim

●LineToBox
・Boxを生成する
・Parameter
 -EdgeSize
 -DepthSize
 
int ptnum[] = primPts()

●MakeEdge
PrimPtsを取得して、隣同士のPrimPtの間にmakeEdgeを行う
・Parameter
 -Range

●EdgeTransform
動かすEdgeに隣接しているPtも一緒に動かすかどうかを関連づける


●BaseParamenter
・Parameter
 -Transform
 -Scale
 -Rotate 
 
●DivideHeight
・Parameter
 -IsPattern
 -IsRandom 
 -HeightValue
 
▲DividePrim
・


■IDEA
●InitParameterを用いた柔軟なPDの設計
 -Scale
 -Seed

●Noise周りの設計
・NoiseParameterの追加
 -AttributeにNoiseを持たせて
 
 -Boxサイズに偏りを持たせる
 -Typeに偏りを持たせる
