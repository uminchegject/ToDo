■SoulCity
○SingleBlockの実装
・SoulCity
 -ResidenceBlock
 -IndustrialBlock
・TokyoCity 
 -SignBoardBlock
 -ResidenceBlock
 
○区画の実装
・SoulCity
 -3DGreeble
・TokyoCity
 -平面Greebleを行い、Residence + SignBoardを実装する
 
○街並みの実装
・Tokyo,Soulを共通で実装する
・Noiseで高さを調整する(Noise + Random)


[業務]
■Study + 調査
○転がる柱の実装に必要な情報を調査



△AI周りの調査

■拡張実装

●説明

●智人にギミックを生成させる
智人に動きと役割を持たせるためギミックを智人に創造してもらう

●どちらのモードでも使用できるギミックを考える
・ジャンプパッド
 -探索モードなら、障害物を飛び越えるためのギミックとして用いる
 -バトルモードなら高くジャンプして攻撃力の高い落下攻撃を行えるギミックになる

●智人の指示の変更
・待機モードを徘徊モードに変更する
 -虚人に追従するモード(既存の挙動)と、虚人から一定距離の範囲を徘徊するモードの二つを智人に持たせる。

・徘徊モードの仕様
 -CreationSourceの回収
 -ギミックの配置


■基礎実装
○トリガーに接触すると柱が倒れて転がってくる
 -トリガーに接触すると柱が倒れてくる、
 -倒れた柱はプレイヤーのほうに転がる（坂道を転がる）
 -倒れるときにエフェクト、効果音、カメラが振動が発生する
 -転がってくるスピードを調整できる
 -ヒットしてしまった場合は分離+ダメージを受ける
 -ガードもしくは攻撃で破壊できる






▲SoulCity
○SurfaceMakerParameterにパラメーターを加えて、修正も行う

float top3DEdgeSideSize = point(1, "Top3DEdgeSideSize", paramIndex);
float bottom3DEdgeSideSize = point(1, "Bottom3DEdgeSideSize", paramIndex);
 
vector scale =  v@scale;
scale.x -= depthSize * 2;
scale.y -= depthSize * 2;
scale.z = topEdgeSize;
 
vector scaleTopEdge = v@scale;
scaleTopEdge.x = scale.z - top3DEdgeSideSize * 2;
scaleTopEdge.y = topEdgeSize;
scaleTopEdge.z = depthSize;

vector scale3DTopEdge = top3DEdgeSideSize;
scale3DTopEdge.y = topEdgeSize;

if(0.0 < sideEdgeSize)
if(0.0 < top3DEdgeSideSize)
if(0.0 < bottom3DEdgeSideSize)


○BaseAssetの検証
・Type2の検証
・Patternの検証

○DetailAssetの検証
・Patternの検証
・Greebleの検証


■BLOG
Attributeについての説明
