[反省]
・検証でもmainにまとめる

[Study]
・USD
https://www.polyphony.co.jp/publications/
・Spline曲線
https://qiita.com/khidaka/items/bce40daf5d5ea469241e

[USD]
○一度サンプルで挙動確認を行って挙動の流れを確認する

・USDの基礎
https://www.youtube.com/watch?v=4kMBwpdwkkw
https://www.slideshare.net/slideshow/usd-79288174/79288174#2
https://fereria.github.io/reincarnation_tech/usd/what_is_usd

・USDの運用
https://fereria.github.io/reincarnation_tech/usd/python/tutorials/01
https://qiita.com/ousttrue/items/b5f34e0f2441ca74467e
https://qiita.com/takahito-tejima/items/ee0332bfb5c9baed3b09

・LOPS&Soraris
https://note.com/indyzonecorp/n/ndf9d8f82d7e5#93191dbb-a31d-4dbc-851a-584b7882528b
https://houdinifx.jp/blog/lops%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF/

https://www.sidefx.com/tutorials/usd-authoring-with-solaris/
https://www.youtube.com/watch?v=SqTHglDeKtU


[Python]
■ツール課題
○scriptJobの実装

○デバッグ


[ProceduralModeling]
■HardSurfaceModeling
※Modelingをベースに行い、プロシージャルにサポートするツールを設計する
※模様を生成することを意識する
 -※模様の形態に問わずDetail部分をModelingできる方法を考える
 -※BaseParameter(Scale, Rotate, Transform)を用いた模様生成を考える

○モデリングTutorialを調べる
・ハードサーフェスモデリングについて勉強する
 -各パーツのディテール部分で応用できない場所がないかを調査する
 -プロシージャルにサポートできる行程がないかを調べる
・検証しやすいパターンを考える

○Voronoi分割したPrimSurfaceを統合する

○Voronoi分割及びPrimSurfaceの結合処理の繰り返し
 -フラクタル
 -スケールコントラスト

○検証環境の構築(Houdini)
・色
 -グレースケール
・OffsetHeight
・境目のObj化
・Pointの配置

○BaseParameterの実装
・Scale
 -Extend
・Rotate
・Transform
 -Height

△多様な形態に適応したDetail生成ロジックを設計

■IDEA
●Base
・DivideLine
・BaseParameter
 -Transorm
 -Rotate
 -Scale

●Voronoi
・PointPos
・RoundEdge


[ModularModelieng]
※明確なアセットセットを目標に都度新規実装を加えていく

■ModularOldCity
○BoxBaseParameterの検証環境を整備
・BoxBaseParameterを整理する
・Box&Colorの検証環境を整備

○LineBaseParamenterの検証環境を整備
・BoxToLineを実装
・LineToBoxを実装

○DividePrimの実装(検証)
int makingPrimId = addprim(0, "polyline");

int primpts[] = primpoints(0, @primnum);
addvertex(0, makingPrimId, primpts[0]);
for(int i = 1; i < len(primpts); ++i)
{	
	int pts[] = primpoints(0, makingPrimId);
	if(random(point(0, "P", primpts[i])) < 0.5 && 1 < len(pts)) makingPrimId = addprim(0, "polyline");
	
	addvertex(0, makingPrimId, primpts[i]);
}

removeprim(0, @primnum, 1);

○凹凸Arcの検証
・MakeEdge(凹)を上部にいくほど追加するように実装
 -HeightLineを複製しつつ、徐々に小さくなるように実装して検証を行う
・DividePrimを行い分割
・Boxとカラーで挙動を確認

○凹凸Volumeの設計
・Base内でラインを引いて削りながらHeightをつけていく
 -直線で削っていく検証を行う
 -ラインを中間点で折込を入れる


・BoxBaseParameterを整理する
 -1通りの挙動を確認する
 -Box&Colorの検証環境を整える
・LineBaseParamenterを新規実装する
 -BoxToLine, LineToBoxを実装
 -DivideHeightを実装
 -Lineの検証環境を整理
 -MakeEdgeを実装
 -DividePrimを実装
・InitParameterを整理する

△Detail部分を整理する


■LineMakerの設計
・Attributeに表裏のベクトルを設定しておく
 
●MakeEdge
PrimPtsを取得して、隣同士のPrimPtの間にmakeEdgeを行う
・Parameter
 -Range

●BaseParamenter
・Parameter
 -Transform
 -Scale
 -Rotate 
 
●DivideHeight
・Parameter
 -IsPattern
 -IsRandom 
 -HeightValue
 
▲DivideBlock
・独立したSubBlockを用意し、高さ・屋根に変化を持たせる
 
▲DividePrim


■IDEA
●InitParameterを用いた柔軟なPDの設計
 -Scale
 -Seed

●Noise周りの設計
・NoiseParameterの追加
 -AttributeにNoiseを持たせて
 
 -Boxサイズに偏りを持たせる
 -Typeに偏りを持たせる
