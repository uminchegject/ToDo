[Study]
●リグ
・MayaGamesから機能の概要を把握する
 -機能の概要を把握した上でビジュアルリファレンスで深堀を行っていく
・ウェイトをつける(スキニング)
・モデリング工程
 -モデリング
 -骨入れ
 -バインド(スキニング)


[USD]
○サンプルの確認
・ドキュメントのサンプルコードと比較する
・メモをまとめる

●資料
・USDの基礎
https://www.youtube.com/watch?v=4kMBwpdwkkw
https://www.slideshare.net/slideshow/usd-79288174/79288174#2
https://fereria.github.io/reincarnation_tech/usd/what_is_usd

・USDの運用
https://fereria.github.io/reincarnation_tech/usd/python/tutorials/01
https://qiita.com/ousttrue/items/b5f34e0f2441ca74467e
https://qiita.com/takahito-tejima/items/ee0332bfb5c9baed3b09
https://dev.classmethod.jp/articles/how_to_use_usd_for_developers/

・LOPS&Soraris
https://note.com/indyzonecorp/n/ndf9d8f82d7e5#93191dbb-a31d-4dbc-851a-584b7882528b
https://houdinifx.jp/blog/lops%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF/

https://www.sidefx.com/tutorials/usd-authoring-with-solaris/
https://www.youtube.com/watch?v=SqTHglDeKtU

・Plugin
https://candrgroup-coyotevfx.atlassian.net/wiki/spaces/TEC/pages/344555807

[Python]
■ツール課題
○調査
・必要な処理をまとめる

○実装メモの作成

●仕様


[IZON.]
■Gimmick_06
○ChibitoのAIを復旧する
 -AIControllerからCommonを呼び出す
○ExcuteEverytimeを正常に動くよう修正する

○Creation周りを修正する
 -CreationSourceを継承する

■Gimmick_04
○待機周りの処理を実装
 ーソースの整理
 
○追加実装箇所を確認

■Gimmick_11
○所有周りの処理を調査
・降ろせる方法を調査
 -CancelCarryGimmick

○一連の処理を実装

[ProceduralModeling]
※模様を生成することを意識する
 -模様の形態に問わずDetail部分をModelingできる方法を考える
 -BaseParameter(Scale, Rotate, Transform)を用いた模様生成を考える
※どんな幾何学でもBlockとして管理できるようする
 -Point
 -Line
※モデリング工程内からパラメーター化できそうな部分を調べる
 -Blockベースで対応できる処理
 -汎用工程(繰り返し行う行程)
 -パラメーターで簡単に調整できそうな工程

○VoronoiGeneratorを実装
・BaseParameterの実装
・BaseParameterを行列で管理するように修正

○HoudiniForMayaで確認

○Detail部分の作成
・※VoronoiGeneratorを応用できる建築物を設計する
・Modeling
・UV
・Material

■VoronoiGenerator
●PointEditor
 -Density
 -螺旋
 -Cluster

●BlockEditor
・Directionを設定
・Cofficient値
・△Cluster
・△フラクタル
 -ブロック化して処理をパターン化する
 -スケールコントラストに繋げる

●DetailMaker
 -Extrude
 -CopyToPoint
 -ProceduralModeling
 -Material
・カラー設定
 -Base, Main, Vividを意識する
 -グレースケール
・境目のObj化



[ModularModelieng]
※明確なアセットセットを目標に都度新規実装を加えていく

■Box
○EditBaseの実装
・全体的なフローの修正
 -Type
 -Create
・Baseの実装
 -Transform
 -Scale
 -Rotate

△Greebleの再実装
・FrontDirData

○検証

■LIne
○DividePrimの実装
・Editした部分をDividePrimする

○EditBaseの実装
・Scale
・Transform

○全体的なフローを実装
・Type
・BaseMatrixの適応

○Editの検証

■IDEA
●InitParameterを用いた柔軟なPDの設計
 -Scale
 -Seed

●Noise周りの設計
・NoiseParameterの追加
 -AttributeにNoiseを持たせて
 
 -Boxサイズに偏りを持たせる
 -Typeに偏りを持たせる
