[CityGenerator]

○Pattern処理を修正
-depth / 2を消す

○複数タイプを予め設定できるようにする
//typeを追加
strParam = point(1, "AddTypeNumList", i@LoopCount);
strParamBlockList = re_split(",", strParam);
foreach(string strParamList; strParamBlockList)
{
	strParamList = re_split("_", strParam);
	int addTypeNumList[];
	foreach(string str; strParamList)
	{
		append(addTypeNumList, atoi(str));
	}
	int type = addTypeNumList[int(floor(rand(@ptnum) * len(addTypeNumList)))];
	append(typeNumList, type);
}
i[]@TypeNumList = typeNumList;

○パラメーターをまとめる
・boolで種類を切り分ける

○BuildGeneratorを完成させる
・分岐箇所で予めAssetParamTypeを設定しておく
・パラメーターフローの設計部分を意識して考える

○CityGeneratorの設計
・DataTableをそれぞれ用意してInputに設定する
・Greebleを用いてCityGenneratorを設定
 -Greeble
 -Offset
 -AdjustHeight
 -Greeble

■IDEA
●実装の流れ
・順番に実装しつつ検証していく
 -Asset
 -SurfaceMaker
 -VolumeMaker
 
・処理の流れ
 -Init
 -MakeVolume
 -MakeSurface
 -MakeDetail

●ModuleParameterを繰り返し使う設計で作品を作る
 -Pattern
 -Greeble
 -Scale
 -Block
 
●InitParameterを用いた柔軟なPDの設計
 -Scale
 -Seed

●カードリッジ
 -オブジェクト配置情報
 -アセット情報
・最初のBasePointの値だけ直接設定させる
※カードリッジ側で反射的に操作したいパラメーターは直接設定できるようにする
 -Scale
 -Seed

●BasePoint生成ロジック
・SurfaceBaseのVolumeMakerを実装する
 -NoiseによるSurface内のBasePointの調整
 -奥行の設定

▲PM設計
・SurfaceBaseを生成してVolumeMakerに繋げる
・ObjにMaterialを設定する対応を実装する
