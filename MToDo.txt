[ProceduralModeling]
※模様を生成することを意識する
 -模様の形態に問わずDetail部分をModelingできる方法を考える
 -BaseParameter(Scale, Rotate, Transform)を用いた模様生成を考える
※どんな幾何学でもBlockとして管理できるようする
 -Point
 -Line
※モデリング工程内からパラメーター化できそうな部分を調べる
 -Blockベースで対応できる処理
 -汎用工程(繰り返し行う行程)
 -パラメーターで簡単に調整できそうな工程

■BlockEditor(Base)
○BaseParameterを行列で管理するように修正
○パラメーター管理を実装

○EdgeLine
・ConvertLineを行いPolyLineを取得する

○EdgePoint
・PrimPtsで取得する

○material

△CenterPoint
・PrimのPosを取得する

△Line

■PointEditor
 -Density
 -螺旋
 -Cluster

■BlockEditor
・Directionを設定
・Cofficient値
・ノード形式でパラメーターを管理しつつ、編集を行っていく

△Cluster

△フラクタル
 -ブロック化して処理をパターン化する
 -スケールコントラストに繋げる
・Layerを分けてPoint配置(数)とBaseParameterに変化を持たせる

■DetailMaker
 -Extrude
 -CopyToPoint
 -ProceduralModeling
 -Material

○モデリングTutorialを調べる
・ハードサーフェスモデリングについて勉強する
 -各パーツのディテール部分で応用できない場所がないかを調査する
 -プロシージャルにサポートできる行程がないかを調べる
・検証しやすいパターンを考える

●カラー設定
・Base, Main, Vividを意識する
 -グレースケール
 
▲境目のObj化



[ModularModelieng]
※明確なアセットセットを目標に都度新規実装を加えていく

■Box
○EditBaseの実装
・全体的なフローの修正
 -Type
 -Create
・Baseの実装
 -Transform
 -Scale
 -Rotate

△Greebleの再実装
・FrontDirData

○検証

■LIne
○DividePrimの実装
・

○EditBaseの実装
・Scale
・Transform

○全体的なフローを実装
・Type
・BaseMatrixの適応

○Editの検証

■IDEA
●InitParameterを用いた柔軟なPDの設計
 -Scale
 -Seed

●Noise周りの設計
・NoiseParameterの追加
 -AttributeにNoiseを持たせて
 
 -Boxサイズに偏りを持たせる
 -Typeに偏りを持たせる
