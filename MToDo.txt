[反省]
・ウェイトをつける(スキニング)

・モデリング工程
 -モデリング
 -骨入れ
 -バインド(スキニング)

・ノードエディタ(参照ビュアー)


[Study]
●モデリング
・ハードサーフェスモデリングのロボットモデリングの解説部分からツールの使い方を勉強する
・MayaGamesから機能の概要を把握する
 -機能の概要を把握した上でビジュアルリファレンスで深堀を行っていく
 
●リグ
・MayaGamesから機能の概要を把握する
 -機能の概要を把握した上でビジュアルリファレンスで深堀を行っていく

●HoudiniForMaya
・Tutorial
https://support.borndigital.co.jp/hc/ja/articles/900000756146--%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91Houdini%E3%83%88%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%AB005-Houdini-Engine-for-Maya%E3%81%A7Houdini-%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E3%82%A2%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B
・Debug
https://houdinifx.jp/blog/houdini-engine-for-maya-%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AE%E4%BB%95%E6%96%B9/



[USD]
○パイプラインの基礎的な部分を勉強する
 -ゲーム制作者になるための3Dグラフィックス技術 

○Schemaについて調べる
・CompositionからSchemaまでのドキュメントを確認する
 ーメモにまとめる
https://fereria.github.io/reincarnation_tech/usd/schema

○セットアップ
https://fereria.github.io/reincarnation_tech/usd/start_usd

○サンプルの確認
・CompositionからSchemaまでのドキュメントのサンプルコードを確認する
https://fereria.github.io/reincarnation_tech/usd/schema

●資料
・USDの基礎
https://www.youtube.com/watch?v=4kMBwpdwkkw
https://www.slideshare.net/slideshow/usd-79288174/79288174#2
https://fereria.github.io/reincarnation_tech/usd/what_is_usd

・USDの運用
https://fereria.github.io/reincarnation_tech/usd/python/tutorials/01
https://qiita.com/ousttrue/items/b5f34e0f2441ca74467e
https://qiita.com/takahito-tejima/items/ee0332bfb5c9baed3b09
https://dev.classmethod.jp/articles/how_to_use_usd_for_developers/

・LOPS&Soraris
https://note.com/indyzonecorp/n/ndf9d8f82d7e5#93191dbb-a31d-4dbc-851a-584b7882528b
https://houdinifx.jp/blog/lops%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF/

https://www.sidefx.com/tutorials/usd-authoring-with-solaris/
https://www.youtube.com/watch?v=SqTHglDeKtU



[Python]
■ツール課題
○バインドポーズの調査
 ーリグ周りのツールのサンプルを調査

△RigTutorialを回す
 
●仕様
・髪、頭、体それぞれのバインドポーズを一つのボタンで行えるように実装する
 ーUIは実装せず直接処理が走るように実装する
 ーそれぞれのリグ名を検索して処理を走らせるように実装する
・複数のバインドポーズを一つにまとめる処理を実装する
http://blog.livedoor.jp/morisoba123/archives/52213335.html
 -バインドポーズを上書きする


[IZON.]
■Gimmick_06
○ChibitoのAIを復旧する
 -AIControllerからCommonを呼び出す
○ExcuteEverytimeを正常に動くよう修正する

○Creation周りを修正する
 -CreationSourceを継承する

■Gimmick_04
○待機周りの処理を実装
 ーソースの整理

■Gimmick_11
○所有周りの処理を調査
 -EventAttackROn,EventAttackLOn
 -EventCarryOn, EventCarryOff

○中牟田さんに、相談する
 -サンプルを実装して、それを見せて相談する



[ProceduralModeling]
※模様を生成することを意識する
 -模様の形態に問わずDetail部分をModelingできる方法を考える
 -BaseParameter(Scale, Rotate, Transform)を用いた模様生成を考える
※どんな幾何学でもBlockとして管理できるようする
 -Point
 -Line
※モデリング工程内からパラメーター化できそうな部分を調べる
 -Blockベースで対応できる処理
 -汎用工程(繰り返し行う行程)
 -パラメーターで簡単に調整できそうな工程

○基本操作の確認

○HoudiniForMayaの確認
https://support.borndigital.co.jp/hc/ja/articles/900000756146--%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91Houdini%E3%83%88%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%AB005-Houdini-Engine-for-Maya%E3%81%A7Houdini-%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E3%82%A2%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B

○BlockEditor(Voronoi)を実装
・BaseParameterの実装
・BaseParameterを行列で管理するように修正

○内部をMayaで制作

○検証


■IDEA
●PointEditor
 -Density
 -螺旋
 -Cluster

●BlockEditor
・Directionを設定
・Cofficient値
・△Cluster
・△フラクタル
 -ブロック化して処理をパターン化する
 -スケールコントラストに繋げる

●DetailMaker
 -Extrude
 -CopyToPoint
 -ProceduralModeling
 -Material
・カラー設定
 -Base, Main, Vividを意識する
 -グレースケール
・境目のObj化



[ModularModelieng]
※明確なアセットセットを目標に都度新規実装を加えていく

■Box
○EditBaseの実装
・全体的なフローの修正
 -Type
 -Create
・Baseの実装
 -Transform
 -Scale
 -Rotate

△Greebleの再実装
・FrontDirData

○検証

■LIne
○DividePrimの実装
・

○EditBaseの実装
・Scale
・Transform

○全体的なフローを実装
・Type
・BaseMatrixの適応

○Editの検証

■IDEA
●InitParameterを用いた柔軟なPDの設計
 -Scale
 -Seed

●Noise周りの設計
・NoiseParameterの追加
 -AttributeにNoiseを持たせて
 
 -Boxサイズに偏りを持たせる
 -Typeに偏りを持たせる
