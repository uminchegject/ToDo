○方向と傾きを求める
 -Noise(vector)
float noiseCofficient = ch("NoiseCofficient");
float normalCofficient = ch("NormalCofficient");

v@noiseVector = noise(v@P * noiseCofficient);
@noiseFloat = noise(v@P * noiseCofficient);


//テスト
v@P.y += @noiseFloat;

vector normal = v@noiseVector;
normal.y = 0;
normal *= @noiseFloat * normalCofficient;

int prim = addprim(0, "polyline");
addvertex(0, prim, @ptnum);
int pt = addpoint(0, v@P + normal);
addvertex(0, prim, pt);


○Y軸への複製ノードの実装
・パラメーターの中にパラメーターを入れる
 -for分の中でLineParameter分だけfor分を回し、Lineを複製する

・Init
 -Height
 -BaseLine

//Init
float totalHeightRatio = 0;
for(int i = 0 ; i < numprim; ++i)
{
	totalHeightRatio += prim(0, "HeightRatio", i);
}
float unitHeight = totalHeight / totalHeightRatio;

//Slide
addedHeightRatio = 0;
for(int i = 0 ; i < @numprim - 1; ++i)
{
	float heightRatio = = prim(0, "HeightRatio", i);
	float heightPos = (addedHeightRatio / totalHeightRatio) * totalHeight;
	addedHeightRatio += heightRatio;	
	
	//Slide
	int primpts[] = primpoints(0, i);
	foreach(pt ; primpts)
	{

		vector ptPos = point(0, "P", pt);
		ptPos.y += baseHeight;
		setpointattrib(0, "P", pt, ptPos);
		float height = heightRatio * unitHeight;
		setpointattrib(0, "Height", pt, height);
		
	}	
}

//AddPrim
int primpts[] = primpoints(0, @numprim);
foreach(pt ; primpts)
{
	vector ptPos = point(0, "P", pt);
	ptPos.y += baseHeight;
	setpointattrib(0, "P", pt, ptPos);
}


・Slide
 -1を基準に比率を設定し、最後にHeightに対しての分割を行う

・AddPrim
