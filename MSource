vector blockPosList[];
vector blockScaleList[];
vector blockParamIndexList[]; 
vector blockNextParamindexList[];
	
for(int paramIndex = 0; paramIndex < point(1, "ParamNum", 0); paramIndex++)
{

}

float Ratio = point(1, "Ratio", paramIndex);
float divideRatio = point(1, "DivideRatio", paramIndex);
vector nextParamIndexRange = point(1, "NextParamIndexRange", paramIndex);
vector blockParamIndex = point(1, "BlockParamIndex", paramIndex);
vector divideRange = point(1, "DivideRange", paramIndex);
vector scaleRange = point(1, "ScaleRange", paramIndex);
vector heightRange = point(1, "HeightRange", paramIndex);
vector minSize = point(1, "MinSize", paramIndex);
vector maxSize = point(1, "MaxSize", paramIndex);
int divideLoopNum = point(1, "DivideLoopNum", paramIndex);
float seed = point(1, "Seed", paramIndex);
paramIndex += 1;

for(int j = 0; j < divideLoopNum; j++)
{
	if(divideAxis.x == 0) 
	{
		divideAxis.x = 1;
		divideAxis.z = 0;
	}
	else             
	{
		divideAxis.x = 0;
		divideAxis.z = 1;
	}
	int blockNum = len(blockPosList);        
	for(int i = 0; i < blockNum; i++)
	{
		loopNum += seed;
	
		vector blockPosOrigin = removeindex(blockPosList, 0);
		vector blockScaleOrigin = removeindex(blockScaleList, 0);
		vector blockParamIndexOrigin = removeindex(blockParamIndexList ,0);                 
		
		if(divideRatio < random(loopNum))             
		{
			push(blockParamIndexList, blockParamIndexOrigin);
			push(blockPosList, blockPosOrigin);
			push(blockScaleList, blockScaleOrigin);             
			continue;
		}              
		
		if(blockParamIndex.x < 0)
		{
			blockParamIndex = blockParamIndexOrigin;
		}

		float block1ScaleValue = random(blockPosOrigin * (loopNum + i)) * (divideRange.y - divideRange.x) + divideRange.x;   
		float block2ScaleValue = 1 - block1ScaleValue;
		vector block1Scale = blockScaleOrigin * (baseVector - divideAxis * block1ScaleValue);
		vector block2Scale = blockScaleOrigin * (baseVector - divideAxis * block2ScaleValue);                
		
		vector block1Pos = blockPosOrigin - divideAxis * (block1Scale / 2 + blockScaleOrigin / 2 - block1Scale);
		vector block2Pos = blockPosOrigin + divideAxis * (block2Scale / 2 + blockScaleOrigin / 2 - block2Scale);

		push(blockParamIndexList, blockParamIndex);
		push(blockParamIndexList, blockParamIndex);
		push(blockPosList, block1Pos);
		push(blockPosList, block2Pos);
		push(blockScaleList, block1Scale);
		push(blockScaleList, block2Scale);                                           
	}
}

if(0 < nextParamIndexRange.x) 
{         
	push(blockParamIndexList, blockParamIndexOrigin);
	push(blockPosList, blockPosOrigin);
	push(blockScaleList, blockScaleOrigin);			
	int nextParamIndex = int(random(loopNum + i) * (nextParamIndexRange.y - nextParamIndexRange.x) + nextParamIndexRange.x)
	push(blockNextParamindexList, nextParamIndex);
	continue;
}

for(int i = 0; i < len(blockPosList); i++)
{
	loopNum += seed;
	vector spawnPos = blockPosList[i];
	vector ptBlockParamIndex = blockParamIndexList[i];
	
	vector scale = blockScaleList[i];
	vector adjustedScale = scale;            
	float scaleCofficient = random(loopNum + i) * (scaleRange.y - scaleRange.x) + scaleRange.x;
	adjustedScale.x -= scaleCofficient;
	adjustedScale.z -= scaleCofficient;            
	scale.x *= adjustedScale.x / scale.x;
	scale.z *= adjustedScale.z / scale.z;
	
	float height = random(loopNum + i + 10) * (heightRange.y - heightRange.x) + heightRange.x;
	scale.y = height;
	spawnPos.y += height / 2;            
   
	int ptnum = addpoint(0, spawnPos);
	setpointattrib(0, "scale", ptnum, scale);
	setpointattrib(0, "BlockParamIndex", ptnum, ptBlockParamIndex);
} 
