■MakeVolume
※Patternを意識して考える

●パラメーター
・DivideAxis
・DivideRange
・DivideRatio

○Scalingの原点を設定する
・分割面をベースにする
・前の分割面を記憶する

●ソース
int parameterNum = point(1, "ParamNum", 0);
vector blockPosList[];
vector blockScaleList[];
vector blockRotateList[];
blockScaleList[0] = v@scale;
blockPosList[0] = v@P;
blockRotateList[0] = (0.0, 0.0, 0.0);

for(int paramIndex = 0; paramIndex < parameterNum, paramIndex++)
{
	vector divideAxis = point(0, "DivideAxis", paramIndex);
	float divideRatio = point(0, "DivideRatio", paramIndex);
	
	vector scaleRange = point(0, "ScaleRange", paramIndex);
	vector divideRange = point(0, "DivideRange", paramIndex);
	vector rotateRange = point(0, "RotateRange", paramIndex);
		
	for(int i = 0; i < len(blockPosList); i++)
	{
		vector blockPosOrigin = removeindex(blockPosList, 0);
		vector blockScaleOrigin = removeindex(blockScaleList, 0);
		//vector blockRotateOrigin = removeindex(blockRotateList, 0);
		
		if(random(blockPosOrigin * i) < divideRatio)
		{
			vector baseVector = (1.0, 1.0, 1.0);
			float block1ScaleValue = random(blockPosOrigin * (i + 1));
			float block2ScaleValue = 1 - block1ScaleValue;
			vector block1Scale = blockScaleOrigin * (baseVector - divideAxis * block1ScaleValue)
			vector block2Scale = blockScaleOrigin * (baseVector - divideAxis * block2ScaleValue)
			vector block1Pos = blockPosOrigin + divideAxis * block1ScaleValue / 2;
			vector block2Pos = block - divideAxis * block2ScaleValue / 2;
			push(blockPosList, block1Pos);
			push(blockPosList, block2Pos);
			push(blockScaleList, block1Scale);
			push(blockScaleList, block2Scale);			
		}
		else
		{
			int ptnum = addpoint(0, blockPosOrigin);
			setpointattrib(0, ptnum, blockScaleOrigin);
		}
	}
}

