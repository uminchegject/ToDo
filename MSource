[CityGenerator]
■DataTable
○InitParameterの追加


○indexをremoveするように修正
for(int i = 0; i < len(typeNumList); i++)
{
    int typeNum = point(1, "TypeNum", i@LoopCount); 
    if(typeNumList[i] == typeNum)
    {
		removeindex(typeNumList, i);
        toggleRunning = 1;
        break;
    }
}


○ポイント追加の修正
//ポイントを追加
string strParam = point(1, "AddPointTypeNumList", i@LoopCount);
string strParamList[] = re_split("_", strParam);
int newPointAddTypeNumList[];    
foreach(string str; strParamList)
{
	append(newPointAddTypeNumList, atoi(str));
}    
foreach(int index; newPointAddTypeNumList)
{
	int type = newPointAddTypeNumList[index];
	int newPointTypeNumList[] = i[]@TypeNumList;
	append(newPointTypeNumList, type);
	int pt = addpoint(0, v@P);
	setpointattrib(0, "scale", pt, v@scale);
	setpointattrib(0, "orient", pt, p@orient);
	setpointattrib(0, "FrontDirData", pt, v@FrontDirData);
	setpointattrib(0, "TypeNumList", pt, newPointTypeNumList);
	setpointattrib(0, "LoopCount", pt, i@LoopCount);
}


○ユニット化パラメーターの追加
int toggleRunning = 0;

//タイプに含まれているか
int typeNumList[] = i[]@TypeNumList;

for(int i = 0; i < len(typeNumList); i++)
{
    int typeNum = point(1, "TypeNum", i@LoopCount); 
    if(typeNumList[i] == typeNum)
    {
		removeindex(typeNumList, i);
        toggleRunning = 1;
        break;
    }
}

if(point(1, "ParamType", i@LoopCount) != 5)
{ 
    removepoint(0, @ptnum); 
    toggleRunning = 0;
}

if(toggleRunning == 1)
{
    //メイン処理  
    vector unitSize = point(1, "UnitSize", i@LoopCount);     
    vector unitPos = point(1, "UnitPos", i@LoopCount); 
    
    //移動
    vector MoveVector;
    MoveVector = unitPos * v@scale;
	MoveVector -= unitSize / 2;
    	
    //スケール
    v@scale = unitSize;
      
    MoveVector = qrotate(p@orient, MoveVector);
    v@P += MoveVector;
    

    //typeを追加
    strParam = point(1, "AddTypeNumList", i@LoopCount);
    strParamList = re_split("_", strParam);
    int addTypeNumList[];
    foreach(string str; strParamList)
    {
        append(addTypeNumList, atoi(str));
    }
    int type = addTypeNumList[int(floor(rand(@ptnum) * len(addTypeNumList)))];
    append(typeNumList, type);
    i[]@TypeNumList = typeNumList;
}

i@LoopCount += 1;



●IDEA
・SignBoardBaseにDetailを加える
 -照明
 
・GreebleでBlockを増やす

・AddTypeをランダムにして組み合わせをランダム化する


■Greeble
※フラクタル幾何学を用いた新しいデザイン手法の模索

○Greebleを検証
・BaseAssetで検証
・FrontDirDataの挙動を確認


■フロー処理の修正
○複数タイプを予め設定できる
//typeを追加
strParam = point(1, "AddTypeNumList", i@LoopCount);
strParamBlockList = re_split(",", strParam);
foreach(string strParamList; strParamBlockList)
{
	strParamList = re_split("_", strParam);
	int addTypeNumList[];
	foreach(string str; strParamList)
	{
		append(addTypeNumList, atoi(str));
	}
	int type = addTypeNumList[int(floor(rand(@ptnum) * len(addTypeNumList)))];
	append(typeNumList, type);
}
i[]@TypeNumList = typeNumList;


■IDEA
●実装の流れ
・順番に実装しつつ検証していく
 -Asset
 -SurfaceMaker
 -VolumeMaker
 
・処理の流れ
 -Init
 -MakeVolume
 -MakeSurface
 -MakeDetail

●ModuleParameterを繰り返し使う設計で作品を作る
 -Pattern
 -Greeble
 -Scale
 -Block
 
●InitParameterを用いた柔軟なPDの設計
 -Scale
 -Seed

●カードリッジ
 -オブジェクト配置情報
 -アセット情報
・最初のBasePointの値だけ直接設定させる
※カードリッジ側で反射的に操作したいパラメーターは直接設定できるようにする
 -Scale
 -Seed

●BasePoint生成ロジック
・SurfaceBaseのVolumeMakerを実装する
 -NoiseによるSurface内のBasePointの調整
 -奥行の設定

▲PM設計
・SurfaceBaseを生成してVolumeMakerに繋げる
・ObjにMaterialを設定する対応を実装する
