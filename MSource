int BlockTypeNum = point(1, "AssetParamNum", 0);
int BlockTypeParamNum = point(3, "ParamNum", 0);
int blockTypeParamIndex = v@BlockParamIndex.x + int(random(@P) * (v@BlockParamIndex.y - v@BlockParamIndex.x));
for(int blockTypeIndex = 0; blockTypeIndex < BlockTypeNum; ++blockTypeIndex)
{

    //ブロック選別
    string selectedType = point(1, "BlockType", blockTypeIndex);
    string paramType = point(3, "_2DBlockTypeSide", blockTypeParamIndex);
    if(i@ToggleTop2DBlock == 1)
    {
        paramType = point(3, "_2DBlockTypeTop", blockTypeParamIndex);
    }
    if(selectedType != paramType) { continue;}

    //Primからサイズを取得
    int primPts[] = primpoints(0, @primnum);
    vector ptPosOrigin = point(0, "P", primPts[0]);

    float sizeX;
    float sizeY;
    vector widthAxis;
    vector heightAxis;

    for(int i = 1; i < len(primPts); i++)
    {
        vector ptPos = point(0, "P", primPts[i]);
        vector ptPosLast = point(0, "P", primPts[i - 1]);
        float distanceFromPt = length(ptPosOrigin - ptPos);
        float distanceFromLastPt = length(ptPosOrigin - ptPosLast);
        
        if(distanceFromPt < distanceFromLastPt)
        {
            int ptNum = primPts[i];
            primPts[i] = primPts[i - 1];
            primPts[i - 1] = ptNum;       
        }
    }

    vector pt1Pos = point(0, "P", primPts[1]);
    sizeX = length(pt1Pos - ptPosOrigin);
    widthAxis = normalize(pt1Pos - ptPosOrigin);

    vector pt2Pos = point(0, "P", primPts[2]);
    sizeY = length(pt2Pos - ptPosOrigin);
    heightAxis = normalize(pt2Pos - ptPosOrigin);


 
    //スケール周り
    vector scaleCofficient = point(1, "Scale", blockTypeIndex);
    sizeX *= scaleCofficient.x;
    sizeY *= scaleCofficient.y;  
    
    //ブロック周り    
    vector blockscale = point(1, "ChildBlockScale", blockTypeIndex);
    int blockXAxisNum = int(sizeX / blockscale.x);
    int blockYAxisNum = int(sizeY / blockscale.y);
    if(blockXAxisNum < 1) blockXAxisNum = 1;
    if(blockYAxisNum < 1) blockYAxisNum = 1;
    vector adjustedScale;
    adjustedScale.x = sizeX / blockXAxisNum;
    adjustedScale.y = sizeY / blockYAxisNum;
    adjustedScale.z = adjustedScale.x * blockscale.z;
    vector volumeScale = point(1, "VolumeScale", blockTypeIndex);
    vector assetScaleOrigin = volumeScale.x * adjustedScale.x;      



    
    vector addBlock = point(1, "AddBlock", blockTypeIndex);
    for(int i = 1; i < blockXAxisNum + 1 + addBlock.x; ++i)
    {
        for(int j = 1; j < blockYAxisNum + 1 + addBlock.y; ++j)
        {   
                
            float randomNum = random(@P * (blockTypeIndex + i + 10 * j));                   
            
            //アセットDT周り
            int AssetRefNum = point(2, "AssetRefNum", 0);
            int AssetRefIndexList[];
            for(int k = 0; k < AssetRefNum; ++k)
            {
                string assetType1 = point(1, "AssetType", blockTypeIndex);
                string assetType2 = point(2, "AssetType", k);
                if(assetType1 == assetType2)
                {
                    append(AssetRefIndexList, k);
                }
            }
            
            int assetRefIndex = AssetRefIndexList[int(len(AssetRefIndexList) * randomNum)];
            string assetRef = point(2, "AssetRef", assetRefIndex);
            
            //回転周り
            vector rotate = point(1, "Rotate", blockTypeIndex);
            vector assetRotate = point(2, "Rotate", assetRefIndex);
            vector axis = set(1,0,0);
            vector4 q = quaternion(radians(rotate.x + assetRotate.x) ,axis);
            matrix mRotate = qconvert(q);
            axis = set(0,1,0);
            q = quaternion(radians(rotate.y + assetRotate.y) ,axis);
            mRotate *= qconvert(q);
            axis = set(0,0,1);
            q = quaternion(radians(rotate.z + assetRotate.z) ,axis);
            mRotate *= qconvert(q);
            vector normal;
            normal.z = 1;
            q = dihedral(normal, v@N);  
            mRotate *= qconvert(q);
            normal *= mRotate; // 回転行列を乗算
            
            //移動周り    
            vector spawnBasePos = v@P;
            vector transform = point(1, "Transform", blockTypeIndex);
            transform *= adjustedScale;
            transform *= mRotate;
            spawnBasePos += transform;

            //アセットの微調整
            vector assetTransform = point(2, "Transform", assetRefIndex);
            float sizeCofficient = point(2, "SizeCofficient", assetRefIndex);
            vector assetScale = sizeCofficient * assetScaleOrigin;
            vector adjustedAssetMove = assetTransform * sizeCofficient * assetScale;
            adjustedAssetMove *= mRotate;
            spawnBasePos += adjustedAssetMove;
            
            //TransformRange
            vector transformXAxisRange = point(1 , "TransformXAxisRange", blockTypeIndex);
            vector transformYAxisRange = point(1 , "TransformYAxisRange", blockTypeIndex);
                        
            vector spawnPos = spawnBasePos;
            spawnPos += adjustedScale.x * (i - 0.5) * widthAxis - sizeX * widthAxis / 2;
            spawnPos += adjustedScale.y * (j - 0.5) * heightAxis - sizeY * heightAxis / 2;
            
            if(point(1 , "RemainRatio", blockTypeIndex) < random(spawnPos)) {continue;}
            vector movePos;
            movePos.x = random(spawnPos * 10) * (transformXAxisRange.y - transformXAxisRange.x) + transformXAxisRange.x;
            movePos.y = random(spawnPos * 20) * (transformXAxisRange.y - transformXAxisRange.y) + transformXAxisRange.y;
            movePos *= mRotate;
            spawnPos += movePos;
            
            int pt = addpoint(0, spawnPos);
            setpointattrib(0, "N", pt, normal);
            setpointattrib(0, "scale", pt, assetScale);
            setpointattrib(0, "AssetRef", pt, assetRef);
        }
    }
}
removeprim(0, i@primnum, 1);
